#[

        E2 Image Viewer - Potat05 & musicalskele                   

                                                             
  Be cautious when loading large image data (>=250KiB)       
    as it may lead to crashes on lower-end systems.          
                                                             
                                                             
  If you encounter issues hosting the server, use the        
 "wire_expression2_unlimited 1" console command to           
        disable the E2 ops limit temporarily.                
                                                             

]#

@name skeles advanced display component 

@strict

@inputs DigiScreen:wirelink ImageStream:string

@persist [Width, Height, X, Y]:number
@persist [Start, CurrentState,CPUMax,OPSMax]:number
@persist [Base64Stream, Base64Charset]:string 
@persist [CONS_ONE_THIRD,CONS_TWO_THIRDS,CONS_HALF]:number
@persist ConfigsTable:table
@persist Owner:entity
@persist Base64Stored:array
@persist CmdPrefix:string

if(first() || dupefinished()) {
    ConfigsTable=table(
    "CPUMax"          = 10000, 
    "OPSMax"          = 11000, 
    "CmdPrefix"       = ">",    
    "ResetDuringInit" = 1) 

  #---------|CONFIGS|---------#
    CPUMax          = 10000   # 2k or higher
    OPSMax          = 11000   # ~10k
    CmdPrefix       = ">"     # command prefix
    ResetDuringInit = 1       #

  #--------|CONSTANTS|--------#
    CONS_ONE_THIRD  = 1/3
    CONS_TWO_THIRDS = 2/3     # not actually sure if these help with efficiency. may remove in future.
    CONS_HALF       = 1/2

  #----------|MISC.|----------#
    Width           =0
    Height          =0
    X               =0
    Y               =0
    Format          =0
    CurrentState    =0

  #--------|IMAGE DATA|--------#
    # Imagedata can either be:

    # included from a seperate file (recommended)
    #include "imagedata"
    
    # an input
    # Base64Stream = ImageStream

    # pasted directly here (extremely laggy for files >200kb)
    # Base64Stream =

  #----------------------------#




}
  #------|CHAT COMMANDS!|------#
Owner = owner()

event chat(Player:entity, Message:string, _:number) {
      # basically ripped from the expression 2 events section from wiremod wiki, pretty much wip
    if (Player == Owner & Message[1] == CmdPrefix) {
        local Rest = Message:sub(2)
        local Get = Rest:explode(" ")
        switch (Get[1, string]) {
            
            case "info",
                hideChat(1)
                local FormatString = array(
                    "None",
                    "RGB223",
                    "RGB565",
                    "YCbCr",
                    "BC1",
                    "RGB888"
                )[Format + 1, string]
                
                print("E2 Image Display by Potat05 & musicalskele - Currently Displaying image of size " + floor(Base64Stream:length() / 1024) + "KiB or "+round(Base64Stream:length() / 1048576,3)+"MiB, with dimensions " + Width + ":" + Height + " size, with the " + FormatString + "format.")
                break
            case "init",
                hideChat(1)
                print("reinitializing the display.")
                Base64CharIndex = 1
                Base64Stored = array()
                CurrentState=1
                break
            case "config",
                hideChat(1)
                print(Get)
                break
            default,
                print("that is an unknown command: " + Get[1, string])
                break
        }
    }

    if((CurrentState == 0) && (DigiScreen != nowirelink())) {
        CurrentState = 1
    }
}

if((CurrentState == 0) && ~DigiScreen && (DigiScreen != nowirelink())) {
    CurrentState = 1
}


  #------|DISPLAY FUNCT.|------#

# Color mode functions:
function wirelink:dsGetColorMode() { return This[1048569] }  # Retrieves the current color mode
function wirelink:dsSetColorMode(Mode:number) { This[1048569] = Mode}  # Sets the color mode
#[ 
    Color modes:
    | 0: RGBXXX
    | 1: R G B
    | 2: R*65536 + G*256 + B
    | 3: RRRGGGBBB 
]#

# Digital Screen clearing functions:
function wirelink:dsClearRow(Row:number) { This[1048570] = Row }  # Clears a specific row
function wirelink:dsClearColumn(Column:number) { This[1048571] = Column }  # Clears a specific column
function wirelink:dsClear() { This[1048574] = 0 }  # Clears the entire display

# Digital Screen write functions:
function wirelink:dsSetPixel(X:number,Y:number, Col:vector) {
  # TODO: Is there a way to write to mipmaps?
  # This[X * Height + Y] = rgb2digi(Col, 2)
    This[X + Y * Height] = rgb2digi(Col, 2) 
}

# Digital Screen dimension functions:
function wirelink:dsGetHeight() { return This[1048572] }  # Retrieves the display height
function wirelink:dsSetHeight(Height:number) { This[1048572] = Height }  # Sets the display height
function wirelink:dsGetWidth() { return This[1048573] }  # Retrieves the display width
function wirelink:dsSetWidth(Width:number) { This[1048573] = Width }  # Sets the display width

# Other Digital Screen functions:
function wirelink:dsClock() {This[1048575] = 1}  # Clock function 
function wirelink:dsReset() {
    if(ResetDuringInit){This[1048574] = 0} # Reset Screen and whatever was on it will be cleared.
    This[1048569] = 2       # Set color mode
    This[1048575] = 1       # Apply changes
                            # Set resolution
    This[1048572] = Width   # Set width
    This[1048573] = Height  # Set height
}


  #------|BASE-64 FUNCT.|------#

Base64Charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
Base64CharIndex = 1
Base64Stored = array()

function number b64_next() {
    
    if(Base64Stored:count() == 0) {
        
        local N =
            bShl(Base64Charset:find(Base64Stream[Base64CharIndex]) - 1, 18) +
            bShl(Base64Charset:find(Base64Stream[Base64CharIndex + 1]) - 1, 12) +
            bShl(Base64Charset:find(Base64Stream[Base64CharIndex + 2]) - 1, 6) +
            (Base64Charset:find(Base64Stream[Base64CharIndex + 3]) - 1)
        
        
        Base64Stored:pushNumber(bAnd(bShr(N, 16), 0xFF))
        Base64Stored:pushNumber(bAnd(bShr(N, 8), 0xFF))
        Base64Stored:pushNumber(bAnd(N, 0xFF))
        
        Base64CharIndex += 4
        
    }
    
    return Base64Stored:shiftNumber()
    
}

function vector b64_next_triple() {
    
    if(Base64Stored:count() == 0) {
        
        local N =
            bShl(Base64Charset:find(Base64Stream[Base64CharIndex]) - 1, 18) +
            bShl(Base64Charset:find(Base64Stream[Base64CharIndex + 1]) - 1, 12) +
            bShl(Base64Charset:find(Base64Stream[Base64CharIndex + 2]) - 1, 6) +
            (Base64Charset:find(Base64Stream[Base64CharIndex + 3]) - 1)
        
        
        Base64Stored:pushNumber(bAnd(bShr(N, 16), 0xFF))
        Base64Stored:pushNumber(bAnd(bShr(N, 8), 0xFF))
        Base64Stored:pushNumber(bAnd(N, 0xFF))
        
        Base64CharIndex += 4
        
    }
    
    return vec(Base64Stored:shiftNumber(),Base64Stored:shiftNumber(),Base64Stored:shiftNumber())
    
}


  #-|PIXEL & INCREMENT FUNCT.|-#
function number incrementSingularPixel() {
    X++
    if(X >= Width) {
        X = 0
        Y++
        if(Y >= Height) {
            Y = 0
            return 1
        }
    }
    
    return 0
}


function number incrementBlock(Size:number) {
    X += Size
    if(X >= Width) {
        X = 0
        Y += Size
        if(Y >= Height) {
            Y = 0
            return 1
        }
    }
    
    return 0
}


  #-----|PIXEL OPERATIONS|-----#

function vector ycbcr_rgb(Y:number, Cb:number, Cr:number) {
    # https://en.wikipedia.org/wiki/YCbCr#JPEG_conversion
    # Usually clamping these is useless, But because we quantize to save bits
    # we need to make sure these are clamped or else artifacts will appear.
    return vec(
        clamp(Y                         + 1.402    * (Cr - 128), 0, 255),
        clamp(Y - 0.344136 * (Cb - 128) - 0.714136 * (Cr - 128), 0, 255),
        clamp(Y + 1.772    * (Cb - 128)                        , 0, 255)
    )
}

function number dequantize(Value:number, Bits:number) {
    return (Bits == 5) * (Value * 33 >> 2) + (Bits == 6) * (Value * 65 >> 4) + (Bits != 5 && Bits != 6) 
}

function vector decode565(Color:number) {
    return vec(
        dequantize(bShr(bAnd(Color, 0b1111100000000000), 11), 5),
        dequantize(bShr(bAnd(Color, 0b0000011111100000), 5), 6),
        dequantize(bAnd(Color, 0b0000000000011111), 5)
    )
}

function vector lerpt(A:vector, B:vector, T:number) {
    return vec(
        A:x()+ (B:x()-A:x())* T,
        A:y()+ (B:y()-A:y())* T,
        A:z()+ (B:z()-A:z())* T
    )
}

  #-----|NEXTPIXELS FUNC.|-----#
function number nextPixels() {
    if (X >= Width) {
        return 1
    }
    
    switch(Format) {
        case 1,
          #---------|RGB-233|---------#
            local Color = b64_next()
            DigiScreen:dsSetPixel(X, Y, vec(
                bAnd(Color, 0b11000000),
                bShl(bAnd(Color, 0b00111000), 2),
                bShl(bAnd(Color, 0b00000111), 5)
            ))
            return incrementSingularPixel()
        
        case 2,
          #---------|RGB-565|---------#
            local Color = bOr(b64_next(), bShl(b64_next(), 8))
            DigiScreen:dsSetPixel(X, Y, decode565(Color))
            return incrementSingularPixel()

        case 3,
          #--------|YCbCr-655|--------#
            local Color = bOr(b64_next(), bShl(b64_next(), 8))
            DigiScreen:dsSetPixel(X, Y, ycbcr_rgb(
                dequantize(bShr(bAnd(Color, 0b1111110000000000), 10), 6),
                dequantize(bShr(bAnd(Color, 0b0000001111100000), 5), 5),
                dequantize(bAnd(Color, 0b0000000000011111), 5)
            ))
            return incrementSingularPixel()
        
        case 4,
          #-----------|BC1|-----------#
            local Color1Value = bOr(b64_next(), bShl(b64_next(), 8))
            local Color2Value = bOr(b64_next(), bShl(b64_next(), 8))
            local Color1 = decode565(Color1Value)
            local Color2 = decode565(Color2Value)
            

            local Palette = (Color1Value > Color2Value) ? array(
                Color1,
                Color2,
                lerpt(Color1, Color2, CONS_ONE_THIRD),
                lerpt(Color1, Color2, CONS_TWO_THIRDS)
            ) : array(
                Color1,
                Color2,
                lerpt(Color1, Color2, CONS_HALF),
                vec(0, 0, 0)
            )
			
            for(Dy = 0, 3, 1) {
                if (Y + Dy < Height) {
                    local BitmapRow = b64_next()
                    for(Dx = 0, 3, 1) {
                        if (X + Dx < Width) {
                            local P = bAnd(bShr(BitmapRow, Dx * 2), 0b11)+1
                            DigiScreen:dsSetPixel(X + Dx, Y + Dy, Palette[P, vector])
                        }
                    }
                }
            }
            return incrementBlock(4)
        
        case 5,
          #---------|RGB-888|---------#
            DigiScreen:dsSetPixel(X, Y, b64_next_triple())
            return incrementSingularPixel()
        default,
            # handle unknown format or other cases
            return 0
    }
}


  #-----|MAIN LOOP TICK|-----#

Start = 0
event tick(){
   
    switch(CurrentState) {
        
        case 0, break
        
        case 1,
            Start = systime()
            Width = bOr(b64_next(), bShl(b64_next(), 8))
            Height = bOr(b64_next(), bShl(b64_next(), 8))
            Format = b64_next()
            DigiScreen:dsReset()
            local FormatString = array(
                "None",
                "RGB223",
                "RGB565",
                "YCbCr",
                "BC1",
                "RGB888",
                "Placeholder0x06",
                "Placeholder0x07",
                "Placeholder0x08",
                "Placeholder0x09",
                "Placeholder0x0A",
                "Placeholder0x0B",
                "Placeholder0x0C",
                "Placeholder0x0D",
                "Placeholder0x0E",
                "Placeholder0x0F",
                "Placeholder0x10",
                "Placeholder0x11",
                "Placeholder0x12",
                "Placeholder0x13",
                "Placeholder0x14",
                "Placeholder0x15",
                "RGB888 RLE v1",
                )[Format + 1, string]
            print("E2 Image Display Component by Potat05 & musicalskele - Displaying image of size " + floor(Base64Stream:length() / 1024) + "KiB or "+round(Base64Stream:length() / 1048576,3)+"MiB, with dimensions " + Width + ":" + Height + " size, with the " + FormatString + "format.")
            CurrentState = 2
        break
        
        case 2,
            while(opcounter()<OPSMax&cpuUsage()*100000<CPUMax){
                if(nextPixels()) {
                    CurrentState = 3
                    break
                }
            }
        break
        
        case 3,
            print("E2 Image Display by Potat05 & musicalskele - Finished in " + 1000*round(systime() - Start,5) + "ms, you may delete the e2 chip now.")
            CurrentState = 4
        break
            
        case 4, break
            
}
}

